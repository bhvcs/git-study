배경: 현재 인턴으로 일하고 있는 회사에서는, 자사 깃랩 사이트를 사용하고 있다. 나는 그동안 github 사이트에서 clone하고 push하는 것 밖에 하지 않았다. 하여 어떻게 이러한 서보를 구축했는지 공부하고자 한다.
내가 나중에 규모가 큰 프로젝트를 여러 사람들과 진행하게 된다면, 기존 github 만으로는 부족함을 느낄 수도 있다. 그 때, 내가 해야 하는 것이 뭔지 숙지하고자 하는 것이다.

우선 사용하는 서버가 있을 것이다. 서버에 깃 저장소를 만들어야 한다. 이 저장소는 bare 저장소로 만들어야 한다. 여기서 bare 저장소란 비어있는 저장소, 즉 워킹 디렉토리가 없는 저장소이다. 이게 무슨 말이냐 하면,
실제로 내가 작업한 파일이 들어가는 저장소가 아닌, 내가 commit하거나 pull과 같은 작업에 대한 히스토리를 관리하는 저장소이다. 실제 github 서버도 이런 식의 bare 저장소로 되어있을 것이다. 이 저장소에는 각 히스토리에
대한 스냅샷을 가지고 있을 것이다. git clone하면 이를 전달 받는다고 생각하면 된다.
bare 저장소는 .git을 뒤에 붙여주는 컨벤션을 사용한다.

위와 같이 저장소를 만들었다. 팀원들은 해당 저장소에서 git clone을 할 것이다. 당연히 이게 되려면 서버에 접근을 할 수 있어야 할 것이다. 하여 서버의 SSH 설정은 꼭 해놔야 할 것이다.
서버의 접근만 가능하면 될까? 팀원들에게 읽고 쓰는 등의 권한 설정도 잊지 말아야 할 것이다.

해당 깃 서버에 사용자를 추가하는 방법은 두 가지가 있다.
  1. 모두에게 계정을 일일이 만들어주기
  2. 서버에 git 계정을 만들고, 권한이 필요한 사용자들의 SSH 공개키를 모아서  ~/.ssh/authorized_keys 여기에 모아두는 것이다. 
-- 지금 회사는 어떤 방식으로 진행하고 있는지 물어봐야겠다.

2번 방법을 조금 설명하겠다.
$ sudo adduser git 과 같은 명령어로 서버에 git 계정을 만든다. 해당 계정을 이용해서 .ssh/authorized_keys 파일에 권한이 필요한 사람들의 ssh 공개키를 모아둘 것이다.
이렇게 되면 사용자들은 git 계정을 통해 해당 깃 서버에 접근할 수 있게 된다.
다만 여기서 그대로 두면 사용자들은 git 계정을 통해 서버에 접근할 수 있게 된다. git 계정으로 git 만 사용하는 게 우리의 의도일 것이다. 이를 위해 로그인 shell을 git-shell로 바꿔야 한다.
이를 통해 git-shell 외의 shell은 접근할 수 없게 되면서 이를 보완할 수 있다.

이와 같은 과정이 끝나면 어떤 프로토콜을 사용해서 git 서버와 소통을 할 것인지 설정해야 한다. 가장 전형적으로 SSH와 (스마트)HTTP를 사용한다. git은 기본적으로 인증 기능을 사용하지 않기 때문에
위와 같은 프로토콜을 설정하는 것이 좋을 것이다.

지금까지 위에서 설명한 방법들은 내가 구축한 git 서버와 cli로 소통하는 것으로 끝난다.
평소 github나 gitlab 사이트처럼 웹을 통해서 확인하기엔 아직 부족한 것이다. 이를 위해 Git 저장소를 웹을 통해 조회할 수 있도록 해주는 웹 기반 인터페이스가 필요할 것이다.
-- 깃랩은 내가 구축한 깃 서버에 웹 인터페이스를 추가하기 위한 툴 느낌 같다 <-> github는 깃 서버를 구축할 필요 없도록 해주는 Git 호스팅 서비스이다. 서버 관리 비용을 아낄 수 있다.
++ 인줄 알았으나 깃랩도 Git 호스팅 서비스를 제공한다. 일단은 내가 구축한 깃 서버가 있다면 이를 위한 웹 인터페이스 기능도 제공해주는 호스팅 서비스라고 생각한다.

느낀 점:
아직은 내가 깃 서버를 구축할 일이 없어서 깊이 와닿지는 않았다. 하지만 나도 언젠가는 깃 서버를 구축할 일이 있을 것이고, 그때 더 자세한 공부를 해야할 것이다.
